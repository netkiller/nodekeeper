#!/usr/bin/env python3
#-*- coding: utf-8 -*-
import os, sys 
import configparser



class Console():
    items = []
    def __init__(self):
        self.prompt = '>'
        try:
            self.config = configparser.RawConfigParser()
            self.config.read('etc/protocol.cfg')
        except configparser.NoSectionError as err:
            print("Error: %s %s" %(err, config['cfgfile']))
            sys.exit(2)
    def screen(self):
        for section in self.config.sections():
            self.items += self.config.items(section) 
            self.items.append(['bash','bash'])
        num = 1
        for item in self.items:
            print("%d. %s" %(num,item[0]))
            num += 1
    def main(self):
        while True:
#            os.system('clear')
            #self.screen()
            commands = dict(self.items)
            cmd = input(self.prompt + " ")
            
            if not cmd :
                os.system('clear')
                continue
            if cmd == 'quit' or cmd == 'exit' or cmd == 'end' :
                if self.prompt == '#':
                    self.config = configparser.RawConfigParser()
                    self.config.read('etc/protocol.cfg')
                    self.prompt = '>'
                else:   
                    break
            elif cmd == 'show':
                for section in self.config.sections():
                    print (section+"")
            elif self.config.has_section(cmd):
                self.section = cmd
                self.prompt_section = cmd + self.prompt
                self.command(cmd)
            elif cmd == 'super' or cmd == 'enable' or cmd == 'en':
                self.config = configparser.RawConfigParser()
                self.config.read('etc/commands.cfg')
                self.prompt = '#'
            elif cmd =='bash':
                if self.prompt == '#':
                    os.system('bash')
            elif cmd in commands:
                os.system('clear')
                os.system(commands[cmd])
            else:
                self.prompt = '>'
                input('Press any key to continue...')
                print()
    def command(self,cmd):
        while True:
            cmd = input(self.prompt_section)
            if cmd == 'show':
                for key,value in self.config.items(self.section):
                    print(key)
            elif self.config.has_option(self.section,cmd) :
                os.system(self.config.get(self.section, cmd))
            elif cmd == 'quit' or cmd == 'exit' or cmd == 'end' :
                os.system('clear')
                break


def main():
    con = Console()
    #con.screen()
    con.main()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print ("Crtl+C Pressed. Shutting down.")
#    except:
#        import traceback
#        traceback.print_exec(file = file('sysadmin.log', 'a+'))

